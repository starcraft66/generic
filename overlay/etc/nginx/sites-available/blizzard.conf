server {
    listen 80;

    access_log /data/logs/blizzard-access.log lancache-default buffer=128k flush=5s;
    error_log /data/logs/blizzard-error.log;

    server_name lancache-blizzard; # primary - used in proxy_cache_key

    # Include other domains from separate file
    # include upstreams/blizzard-domains.conf;
    server_name  dist.blizzard.com dist.blizzard.com.edgesuite.net llnw.blizzard.com edgecast.blizzard.com blizzard.vo.llnwd.net blzddist1-a.akamaihd.net blzddist2-a.akamaihd.net blzddist3-a.akamaihd.net blzddist4-a.akamaihd.net level3.blizzard.com nydus.battle.net edge.blizzard.top.comcast.net;

    location / {
        # Load settings to proxy and cache this upstream location
        include includes/proxy-cache-upstream.conf;

        # Cache data in the cache named "lancache"
        proxy_cache lancache;

        ########## Proxy settings specific to this upstream location ##########

        # Battle.net downloader performs many range requests on large files,
        # and the range requests may be different each time a game is downloaded
        # so we must request and cache consistent slices of the files using our
        # own range requests, and then serve the ranges requested by the Battle.net
        # downloader
        # See here for more info on Nginx's behaviour with Slice:
        # https://www.nginx.com/blog/smart-efficient-byte-range-caching-nginx/#cache-slice

        # Set slice range to 1 megabyte to give good interactivity
        slice 1m;

        # Set upstream request headers to include a range request for the slice we want
        proxy_set_header Range $slice_range;

        # Cache based on URI, without query string, and with slice range
        # When changing the cache key, update includes/log-formats.conf to match
        proxy_cache_key "$server_name$uri$slice_range";

        # Honour "Pragma:no-cache" (HTTP/1.0) and "Cache-Control:no-cache"(HTTP/1.1)
        # request from Battle.net downloader, which will mean if a cached file
        # is found to be corrupt, the Battle.net downloader will request
        # a fresh copy from upstream, which Nginx will cache
        proxy_cache_bypass $http_pragma;
        proxy_cache_bypass $http_cache_control;
        
        # The various CDNs that Blizzard use each employ a different ETag scheme
        # resulting in different ETags for the same piece of (non-modified) content
        # As a result our cached ETag may not match the client's requested ETag
        # even if the content has not been modified
        # To avoid this, we don't pass through the ETag header to clients at all
        proxy_hide_header ETag;
    }
}
